name: Regenerate openapi-connector

on:
  workflow_dispatch:
    inputs:
      openapi_url:
        description: "URL of the OpenAPI JSON"
        required: false
        type: string
      flatten_openapi:
        description: "Enable OpenAPI Flattening"
        required: false
        type: boolean
        default: false
      align_openapi:
        description: "Enable OpenAPI Alignment"
        required: false
        type: boolean
        default: false

jobs:
  build:
    name: Regenerate openapi-connector
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.BALLERINA_BOT_TOKEN }}

      - name: Get Ballerina Version
        run: |
          BAL_VERSION=$(grep -w 'ballerinaLangVersion' gradle.properties | cut -d= -f2 | rev | cut --complement -d- -f1 | rev)
          if [ -z "$BAL_VERSION" ]; then
              BAL_VERSION="latest"
          fi
          echo "BAL_VERSION=$BAL_VERSION" >> $GITHUB_ENV
          echo "Ballerina Version: $BAL_VERSION"

      - name: Set Up Ballerina
        uses: ballerina-platform/setup-ballerina@v1.1.3
        with:
          version: ${{ env.BAL_VERSION }}

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: 21.0.3

      - name: Set ENV Variables
        run: |
          echo -e '${{ toJson(secrets) }}' | jq -r 'to_entries[] | .key + "=" + .value' >> $GITHUB_ENV

      - name: Remove Existing Client Files
        working-directory: ballerina
        run: |
          rm -f client.bal utils.bal types.bal

      - name: Download or Copy openapi.json
        run: |
          if [ -n "${{ inputs.openapi_url }}" ]; then
            echo "Downloading openapi.json from provided URL..."
            wget -O ballerina/openapi.json "${{ inputs.openapi_url }}"
          else
            echo "Using existing openapi.json from docs/spec directory..."
            cp docs/spec/openapi.json ballerina/openapi.json
          fi

      - name: Flatten OpenAPI Specification
        if: ${{ inputs.flatten_openapi }}
        working-directory: ballerina
        run: |
          echo "Flattening OpenAPI Specification..."
          bal openapi flatten -i openapi.json
          mv flattened_openapi.json openapi.json

      - name: Align OpenAPI Specification
        working-directory: ballerina
        if: ${{ inputs.align_openapi }}
        run: |
          echo "Aligning OpenAPI Specification..."
          bal openapi align -i openapi.json
          mv aligned_ballerina_openapi.json openapi.json

      - name: Generate Ballerina Code
        working-directory: ballerina
        run: |
          echo "Generating Ballerina code from OpenAPI Specification..."
          bal openapi -i openapi.json --mode client

      - name: Clean Up Intermediate Files
        working-directory: ballerina
        run: rm -f openapi.json

      - name: Configure Git Identity
        run: |
          git config user.name "chathushkaayash"
          git config user.email "chathushkaayash@gmail.com"

      - name: Commit Files
        id: commitFiles
        run: |
          git checkout -b regenerate-openapi-connector-${{ github.run_number }}
          git add .
          if git diff --cached --quiet;
          then
              echo "hasChanged=false" >> $GITHUB_OUTPUT
              echo "No changes to commit."
          else
              git commit -m "[AUTOMATED] Regenerate the OpenAPI Connector"
              echo "hasChanged=true" >> $GITHUB_OUTPUT
          fi

      - name: Push Results
        if: ${{ steps.commitFiles.outputs.hasChanged == 'true' }}
        run: git push origin regenerate-openapi-connector-${{ github.run_number }}
        env:
          GITHUB_TOKEN: ${{ secrets.BALLERINA_BOT_TOKEN }}

      - name: Create Pull Request
        id: createPR
        if: ${{ steps.commitFiles.outputs.hasChanged == 'true' }}
        run: |
          prUrl=$(gh pr create \
            --title "[Automated] Regenerate OpenAPI Connector" \
            --body "Automated regenerate of the OpenAPI-based Ballerina connector." \
            --base ${{ github.ref }} \
            --head regenerate-openapi-connector-${{ github.run_number }})
          echo "prUrl=$prUrl" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.BALLERINA_BOT_TOKEN }}

      - name: Approve PR
        if: ${{ steps.commitFiles.outputs.hasChanged == 'true' }}
        run: |
          sleep 5
          gh pr review --approve ${{ steps.createPR.outputs.prUrl }}
        env:
          GITHUB_TOKEN: ${{ secrets.BALLERINA_REVIEWER_BOT_TOKEN }}

      - name: Merge PR
        if: ${{ steps.commitFiles.outputs.hasChanged == 'true' }}
        run: |
          checkComplete="0"
          while [ "$checkComplete" != "1" ]; do
            sleep 20

            allChecks=$(gh pr status --json statusCheckRollup --jq '.currentBranch.statusCheckRollup')
            failedCount=$(echo "$allChecks" | jq '[.[] | select(.conclusion == "FAILURE" or .conclusion == "CANCELLED")] | length')
            incompleteCount=$(echo "$allChecks" | jq '[.[] | select(.conclusion != "SUCCESS" and .conclusion != "SKIPPED" and .conclusion != "FAILURE" and .conclusion != "CANCELLED")] | length')

            if [[ "$failedCount" -gt 0 ]]; then
              echo "Some status checks failed or were cancelled."
              exit 1
            fi

            if [[ "$incompleteCount" -eq 0 ]]; then
              checkComplete="1"
              echo "All required checks have passed."
            else
              echo "Waiting for checks to complete... ($incompleteCount remaining)"
            fi
          done
          sleep 20
          gh pr merge --merge --delete-branch
        env:
          GITHUB_TOKEN: ${{ secrets.BALLERINA_BOT_TOKEN }}
